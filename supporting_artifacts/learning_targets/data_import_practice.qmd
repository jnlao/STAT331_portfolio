---
title: "Data Import Practice"
format: 
  html:
    self-contained: true
editor: visual
---

```{r}
#| message: false

library(tidyverse)
library(here)
library(readxl)

```

## Step 1: Read in the dataset `ages.csv`.

```{r}
# Code to read in the ages.csv data goes here! 
ages <- read.csv(here::here("supporting_artifacts", "learning_targets", "data", "Ages_Data", "ages.csv"))

```

## Step 2: Read in the dataset `ages_tab.txt`

```{r}
# Code to read in the ages_tab.txt data goes here! 
ages_table <- read.table(here::here("supporting_artifacts", "learning_targets", "data", "Ages_Data", "ages.csv"))

```

## Step 3: Read in the dataset `ages_mystery.txt`

```{r}
# Code to read in the ages_mystery.txt data goes here! 
ages_myst <- read.delim(here::here("supporting_artifacts", "learning_targets", "data", "Ages_Data", "ages_mystery.txt"), sep = "|")

```

## Step 4: Read in the dataset `ages.xlsx`

```{r}
# Code to read in the ages.xlsx data goes here! 
ages_excel <- read_xlsx(here::here("supporting_artifacts", "learning_targets", "data", "Ages_Data", "ages.xlsx"))

```

## Step 5: Both `read.csv` and `read.table` have an optional argument called `stringsAsFactors`. Figure out what this does.

stringsAsFactors indicates whether or not strings in a file or data set should be treated as factor variables or plain text

## Step 6: Find a way to use `read_csv()` to read `ages.csv` with the variable "Name" as a factor and "Age" as a character.

```{r}
# Code to read in the ages.csv with "Name" as a factor and "Age" as a character goes here! 
ages_data <- read.csv(here::here("supporting_artifacts", "learning_targets", "data", "Ages_Data", "ages.csv"), stringsAsFactors = TRUE, header = FALSE, as.is = 2)

# sapply(ages_data, class)    # shows which class the columns are

```

------------------------------------------------------------------------
